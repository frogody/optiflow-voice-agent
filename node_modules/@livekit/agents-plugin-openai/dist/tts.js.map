{"version":3,"sources":["../src/tts.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport { AudioByteStream, tts } from '@livekit/agents';\nimport type { AudioFrame } from '@livekit/rtc-node';\nimport { randomUUID } from 'crypto';\nimport { OpenAI } from 'openai';\nimport type { TTSModels, TTSVoices } from './models.js';\n\nconst OPENAI_TTS_SAMPLE_RATE = 24000;\nconst OPENAI_TTS_CHANNELS = 1;\n\nexport interface TTSOptions {\n  model: TTSModels | string;\n  voice: TTSVoices;\n  speed: number;\n  instructions?: string;\n  baseURL?: string;\n  client?: OpenAI;\n  apiKey?: string;\n}\n\nconst defaultTTSOptions: TTSOptions = {\n  apiKey: process.env.OPENAI_API_KEY,\n  model: 'tts-1',\n  voice: 'alloy',\n  speed: 1,\n};\n\nexport class TTS extends tts.TTS {\n  #opts: TTSOptions;\n  #client: OpenAI;\n  label = 'openai.TTS';\n\n  /**\n   * Create a new instance of OpenAI TTS.\n   *\n   * @remarks\n   * `apiKey` must be set to your OpenAI API key, either using the argument or by setting the\n   * `OPENAI_API_KEY` environmental variable.\n   */\n  constructor(opts: Partial<TTSOptions> = defaultTTSOptions) {\n    super(OPENAI_TTS_SAMPLE_RATE, OPENAI_TTS_CHANNELS, { streaming: false });\n\n    this.#opts = { ...defaultTTSOptions, ...opts };\n    if (this.#opts.apiKey === undefined) {\n      throw new Error('OpenAI API key is required, whether as an argument or as $OPENAI_API_KEY');\n    }\n\n    this.#client =\n      this.#opts.client ||\n      new OpenAI({\n        baseURL: opts.baseURL,\n        apiKey: opts.apiKey,\n      });\n  }\n\n  updateOptions(opts: { model?: TTSModels | string; voice?: TTSVoices; speed?: number }) {\n    this.#opts = { ...this.#opts, ...opts };\n  }\n\n  synthesize(text: string): ChunkedStream {\n    return new ChunkedStream(\n      this,\n      text,\n      this.#client.audio.speech.create({\n        input: text,\n        model: this.#opts.model,\n        voice: this.#opts.voice,\n        instructions: this.#opts.instructions,\n        response_format: 'pcm',\n        speed: this.#opts.speed,\n      }),\n    );\n  }\n\n  stream(): tts.SynthesizeStream {\n    throw new Error('Streaming is not supported on OpenAI TTS');\n  }\n}\n\nexport class ChunkedStream extends tts.ChunkedStream {\n  label = 'openai.ChunkedStream';\n\n  // set Promise<T> to any because OpenAI returns an annoying Response type\n  constructor(tts: TTS, text: string, stream: Promise<any>) {\n    super(text, tts);\n    this.#run(stream);\n  }\n\n  async #run(stream: Promise<Response>) {\n    const buffer = await stream.then((r) => r.arrayBuffer());\n    const requestId = randomUUID();\n    const audioByteStream = new AudioByteStream(OPENAI_TTS_SAMPLE_RATE, OPENAI_TTS_CHANNELS);\n    const frames = audioByteStream.write(buffer);\n\n    let lastFrame: AudioFrame | undefined;\n    const sendLastFrame = (segmentId: string, final: boolean) => {\n      if (lastFrame) {\n        this.queue.put({ requestId, segmentId, frame: lastFrame, final });\n        lastFrame = undefined;\n      }\n    };\n\n    for (const frame of frames) {\n      sendLastFrame(requestId, false);\n      lastFrame = frame;\n    }\n    sendLastFrame(requestId, true);\n\n    this.queue.close();\n  }\n}\n"],"mappings":"AAGA,SAAS,iBAAiB,WAAW;AAErC,SAAS,kBAAkB;AAC3B,SAAS,cAAc;AAGvB,MAAM,yBAAyB;AAC/B,MAAM,sBAAsB;AAY5B,MAAM,oBAAgC;AAAA,EACpC,QAAQ,QAAQ,IAAI;AAAA,EACpB,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AACT;AAEO,MAAM,YAAY,IAAI,IAAI;AAAA,EAC/B;AAAA,EACA;AAAA,EACA,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASR,YAAY,OAA4B,mBAAmB;AACzD,UAAM,wBAAwB,qBAAqB,EAAE,WAAW,MAAM,CAAC;AAEvE,SAAK,QAAQ,EAAE,GAAG,mBAAmB,GAAG,KAAK;AAC7C,QAAI,KAAK,MAAM,WAAW,QAAW;AACnC,YAAM,IAAI,MAAM,0EAA0E;AAAA,IAC5F;AAEA,SAAK,UACH,KAAK,MAAM,UACX,IAAI,OAAO;AAAA,MACT,SAAS,KAAK;AAAA,MACd,QAAQ,KAAK;AAAA,IACf,CAAC;AAAA,EACL;AAAA,EAEA,cAAc,MAAyE;AACrF,SAAK,QAAQ,EAAE,GAAG,KAAK,OAAO,GAAG,KAAK;AAAA,EACxC;AAAA,EAEA,WAAW,MAA6B;AACtC,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,MACA,KAAK,QAAQ,MAAM,OAAO,OAAO;AAAA,QAC/B,OAAO;AAAA,QACP,OAAO,KAAK,MAAM;AAAA,QAClB,OAAO,KAAK,MAAM;AAAA,QAClB,cAAc,KAAK,MAAM;AAAA,QACzB,iBAAiB;AAAA,QACjB,OAAO,KAAK,MAAM;AAAA,MACpB,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,SAA+B;AAC7B,UAAM,IAAI,MAAM,0CAA0C;AAAA,EAC5D;AACF;AAEO,MAAM,sBAAsB,IAAI,cAAc;AAAA,EACnD,QAAQ;AAAA;AAAA,EAGR,YAAYA,MAAU,MAAc,QAAsB;AACxD,UAAM,MAAMA,IAAG;AACf,SAAK,KAAK,MAAM;AAAA,EAClB;AAAA,EAEA,MAAM,KAAK,QAA2B;AACpC,UAAM,SAAS,MAAM,OAAO,KAAK,CAAC,MAAM,EAAE,YAAY,CAAC;AACvD,UAAM,YAAY,WAAW;AAC7B,UAAM,kBAAkB,IAAI,gBAAgB,wBAAwB,mBAAmB;AACvF,UAAM,SAAS,gBAAgB,MAAM,MAAM;AAE3C,QAAI;AACJ,UAAM,gBAAgB,CAAC,WAAmB,UAAmB;AAC3D,UAAI,WAAW;AACb,aAAK,MAAM,IAAI,EAAE,WAAW,WAAW,OAAO,WAAW,MAAM,CAAC;AAChE,oBAAY;AAAA,MACd;AAAA,IACF;AAEA,eAAW,SAAS,QAAQ;AAC1B,oBAAc,WAAW,KAAK;AAC9B,kBAAY;AAAA,IACd;AACA,kBAAc,WAAW,IAAI;AAE7B,SAAK,MAAM,MAAM;AAAA,EACnB;AACF;","names":["tts"]}