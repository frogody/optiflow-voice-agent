{"version":3,"sources":["../src/stt.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport { type AudioBuffer, mergeFrames, stt } from '@livekit/agents';\nimport type { AudioFrame } from '@livekit/rtc-node';\nimport { OpenAI } from 'openai';\nimport type { GroqAudioModels, WhisperModels } from './models.js';\n\nexport interface STTOptions {\n  apiKey?: string;\n  language: string;\n  prompt?: string;\n  detectLanguage: boolean;\n  model: WhisperModels | string;\n  baseURL?: string;\n  client?: OpenAI;\n}\n\nconst defaultSTTOptions: STTOptions = {\n  apiKey: process.env.OPENAI_API_KEY,\n  language: 'en',\n  detectLanguage: false,\n  model: 'whisper-1',\n};\n\nexport class STT extends stt.STT {\n  #opts: STTOptions;\n  #client: OpenAI;\n  label = 'openai.STT';\n\n  /**\n   * Create a new instance of OpenAI STT.\n   *\n   * @remarks\n   * `apiKey` must be set to your OpenAI API key, either using the argument or by setting the\n   * `OPENAI_API_KEY` environmental variable.\n   */\n  constructor(opts: Partial<STTOptions> = defaultSTTOptions) {\n    super({ streaming: false, interimResults: false });\n\n    this.#opts = { ...defaultSTTOptions, ...opts };\n    if (this.#opts.apiKey === undefined) {\n      throw new Error('OpenAI API key is required, whether as an argument or as $OPENAI_API_KEY');\n    }\n\n    this.#client =\n      this.#opts.client ||\n      new OpenAI({\n        baseURL: opts.baseURL,\n        apiKey: opts.apiKey,\n      });\n  }\n\n  /**\n   * Create a new instance of Groq STT.\n   *\n   * @remarks\n   * `apiKey` must be set to your Groq API key, either using the argument or by setting the\n   * `GROQ_API_KEY` environmental variable.\n   */\n  static withGroq(\n    opts: Partial<{\n      model: string | GroqAudioModels;\n      apiKey?: string;\n      baseURL?: string;\n      client: OpenAI;\n      language: string;\n      detectLanguage: boolean;\n    }> = {},\n  ): STT {\n    opts.apiKey = opts.apiKey || process.env.GROQ_API_KEY;\n    if (opts.apiKey === undefined) {\n      throw new Error('Groq API key is required, whether as an argument or as $GROQ_API_KEY');\n    }\n\n    return new STT({\n      model: 'whisper-large-v3-turbo',\n      baseURL: 'https://api.groq.com/openai/v1',\n      ...opts,\n    });\n  }\n\n  #sanitizeOptions(language?: string): STTOptions {\n    if (language) {\n      return { ...this.#opts, language };\n    } else {\n      return this.#opts;\n    }\n  }\n\n  #createWav(frame: AudioFrame): Buffer {\n    const bitsPerSample = 16;\n    const byteRate = (frame.sampleRate * frame.channels * bitsPerSample) / 8;\n    const blockAlign = (frame.channels * bitsPerSample) / 8;\n\n    const header = Buffer.alloc(44);\n    header.write('RIFF', 0);\n    header.writeUInt32LE(36 + frame.data.byteLength, 4);\n    header.write('WAVE', 8);\n    header.write('fmt ', 12);\n    header.writeUInt32LE(16, 16);\n    header.writeUInt16LE(1, 20);\n    header.writeUInt16LE(frame.channels, 22);\n    header.writeUInt32LE(frame.sampleRate, 24);\n    header.writeUInt32LE(byteRate, 28);\n    header.writeUInt16LE(blockAlign, 32);\n    header.writeUInt16LE(16, 34);\n    header.write('data', 36);\n    header.writeUInt32LE(frame.data.byteLength, 40);\n    return Buffer.concat([header, Buffer.from(frame.data.buffer)]);\n  }\n\n  async _recognize(buffer: AudioBuffer, language?: string): Promise<stt.SpeechEvent> {\n    const config = this.#sanitizeOptions(language);\n    buffer = mergeFrames(buffer);\n    const file = new File([this.#createWav(buffer)], 'audio.wav', { type: 'audio/wav' });\n    const resp = await this.#client.audio.transcriptions.create({\n      file,\n      model: this.#opts.model,\n      language: config.language,\n      prompt: config.prompt,\n      response_format: 'json',\n    });\n\n    return {\n      type: stt.SpeechEventType.FINAL_TRANSCRIPT,\n      alternatives: [\n        {\n          text: resp.text || '',\n          language: language || '',\n          startTime: 0,\n          endTime: 0,\n          confidence: 0,\n        },\n      ],\n    };\n  }\n\n  /** This method throws an error; streaming is unsupported on OpenAI STT. */\n  stream(): stt.SpeechStream {\n    throw new Error('Streaming is not supported on OpenAI STT');\n  }\n}\n"],"mappings":"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","names":[]}